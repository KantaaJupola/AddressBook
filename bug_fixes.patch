Subject: [PATCH] bug fixes
---
Index: main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.cpp b/main.cpp
--- a/main.cpp	(revision 50e3d94070b49cdb5859cf4eb0df2fff33cbebfc)
+++ b/main.cpp	(date 1712307975546)
@@ -21,6 +21,70 @@
     }
 };
 
+void trim(User &user)
+{
+    // name
+    std::string token{""};
+    for (int i{0}; i < user.name.size(); i++)
+    {
+        std::set<char> wsc{' ', '\n', '\r', '\t'};
+        if (!wsc.contains(user.name[i]))
+        {
+            token += user.name[i];
+        }
+    }
+    user.name = token;
+    token = "";
+
+    // surname
+    for (int i{0}; i < user.surname.size(); i++)
+    {
+        std::set<char> wsc{' ', '\n', '\r', '\t'};
+        if (!wsc.contains(user.surname[i]))
+        {
+            token += user.surname[i];
+        }
+    }
+    user.surname = token;
+    token = "";
+
+    // phone_num
+    for (int i{0}; i < user.phone_num.size(); i++)
+    {
+        std::set<char> wsc{' ', '\n', '\r', '\t'};
+        if (!wsc.contains(user.phone_num[i]))
+        {
+            token += user.phone_num[i];
+        }
+    }
+    user.phone_num = token;
+    token = "";
+
+    // adress
+    for (int i{0}; i < user.adress.size(); i++)
+    {
+        std::set<char> wsc{' ', '\n', '\r', '\t'};
+        if (!wsc.contains(user.adress[i]))
+        {
+            token += user.adress[i];
+        }
+    }
+    user.adress = token;
+    token = "";
+
+    // postal_code
+    for (int i{0}; i < user.postal_code.size(); i++)
+    {
+        std::set<char> wsc{' ', '\n', '\r', '\t'};
+        if (!wsc.contains(user.postal_code[i]))
+        {
+            token += user.postal_code[i];
+        }
+    }
+    user.postal_code = token;
+    token = "";
+}
+
 int containsData(User user, std::string enteredData)
 {
     std::string delimiter{":"};
@@ -98,12 +162,13 @@
             allData.erase(allData.begin() + i);
             std::cout << "Enter the new data\n";
             User user;
-            std::cin >> user.name;
-            std::cin >> user.surname;
-            std::cin >> user.phone_num;
-            std::cin >> user.adress;
-            std::cin >> user.postal_code;
-            allData.push_back(user); 
+            std::getline(std::cin, user.name);
+            std::getline(std::cin, user.surname);
+            std::getline(std::cin, user.phone_num);
+            std::getline(std::cin, user.adress);
+            std::getline(std::cin, user.postal_code);
+            trim(user);
+            allData.push_back(user);
         }
     }
     std::ofstream ofile("adressbook.txt", std::ios::trunc);
@@ -129,74 +194,10 @@
             ofile << "E\n";
             ofile.close();
         }
-        
+
     }
 }
 
-void trim(User &user)
-{
-    // name
-    std::string token{""};
-    for (int i{0}; i < user.name.size(); i++)
-    {
-        std::set<char> wsc{' ', '\n', '\r', '\t'};
-        if (!wsc.contains(user.name[i]))
-        {
-            token += user.name[i];
-        }
-    }
-    user.name = token;
-    token = "";
-
-    // surname
-    for (int i{0}; i < user.surname.size(); i++)
-    {
-        std::set<char> wsc{' ', '\n', '\r', '\t'};
-        if (!wsc.contains(user.surname[i]))
-        {
-            token += user.surname[i];
-        }
-    }
-    user.surname = token;
-    token = "";
-
-    // phone_num
-    for (int i{0}; i < user.phone_num.size(); i++)
-    {
-        std::set<char> wsc{' ', '\n', '\r', '\t'};
-        if (!wsc.contains(user.phone_num[i]))
-        {
-            token += user.phone_num[i];
-        }
-    }
-    user.phone_num = token;
-    token = "";
-
-    // adress
-    for (int i{0}; i < user.adress.size(); i++)
-    {
-        std::set<char> wsc{' ', '\n', '\r', '\t'};
-        if (!wsc.contains(user.adress[i]))
-        {
-            token += user.adress[i];
-        }
-    }
-    user.adress = token;
-    token = "";
-
-    // postal_code
-    for (int i{0}; i < user.postal_code.size(); i++)
-    {
-        std::set<char> wsc{' ', '\n', '\r', '\t'};
-        if (!wsc.contains(user.postal_code[i]))
-        {
-            token += user.postal_code[i];
-        }
-    }
-    user.postal_code = token;
-    token = "";
-}
-
 void trim_mini(std::string &data_part)
 {
     std::string token{""};
@@ -459,7 +460,7 @@
             }
 
             if (data2delete.size() == 1)
-            {   
+            {
                 user = data2delete[0];
                 std::cout << "Are you sure you want to delete this user from the Adress Book?\n";
                 std::cout << user.name << '\n';
@@ -477,7 +478,7 @@
                     deleteAUser(data2delete, data, 0);
                     std::cout << "The user has been deleted from the adress book!\n";
                 }
-                
+
             }
             else if (data2delete.size() >= 2)
             {
@@ -553,7 +554,7 @@
             }
 
             if (data2edit.size() == 1)
-            {   
+            {
                 user = data2edit[0];
                 std::cout << "Are you sure you want to edit this user from the Adress Book?\n";
                 std::cout << user.name << '\n';
@@ -568,12 +569,12 @@
                 {
                     ifile.close();
                     ofile.close();
-                    
+
                     editAUser(data2edit, data, 0);
 
                     std::cout << "The user has been edited!\n";
                 }
-                
+
             }
             else if (data2edit.size() >= 2)
             {
@@ -591,7 +592,7 @@
                 std::cin >> choice;
 
                 editAUser(data2edit, data, choice - 1);
-                
+
             }
             else
             {
@@ -615,6 +616,8 @@
             ofile.close();
             break;
         }
+        ifile.close();
+        ofile.close();
     }
 
     return 0;
